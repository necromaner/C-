#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <cstring>
#include <cstdlib>

#define    FINISH_FLAG    "FILE_TRANSPORT_FINISH"
#define PORT  8888

int main() {
    /*1.socket()*/
    int sc = socket(AF_INET, SOCK_STREAM, 0);//tcp
    printf("1.socket()\n");
    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    
    /*2.connect()*/
    if (connect(sc, (struct sockaddr *) &server_addr, sizeof(struct sockaddr)) < 0) {
        printf("2.connect()-UDP连接\n");
        sc = socket(AF_INET, SOCK_DGRAM, 0);
        if (connect(sc, (struct sockaddr *)&server_addr, sizeof(struct sockaddr))<0) {
            perror("Connect socket failed!\n");
            exit(0);
        }
    } else{
        printf("2.connect()-TCP连接\n");
    }
    
    FILE *fq;
    while (1) {
        char buf[BUFSIZ] = "测试发送!";
        scanf("%s", buf);
        if (!strcmp(buf, "exit")){
            close(sc);
            exit(1);
        }
        
        socklen_t len = sizeof(*(struct sockaddr *) &server_addr);
        
        /*2.send()*/
        sendto(sc, buf, BUFSIZ, 0, (struct sockaddr *) &server_addr, len);
        printf("send:%s\n", buf);
    
    

        if (!strcmp(buf, "send")){
    
            if ((fq = fopen("/Users/necromaner/program/C-/UDP/test/send/receive.txt", "w")) == NULL) {
                perror("创建文件失败");
                exit(0);
            }
    
            int recv_len;
            while (1) {
                socklen_t len = sizeof(server_addr);
                recv_len = recvfrom(sc, buf, BUFSIZ, 0,(struct sockaddr *)&server_addr, &len);
                if(recv_len < 0) {
                    printf("接收数据失败!\n");
                    break;
                }
                printf("#");
                if ( strstr(buf, FINISH_FLAG) != NULL ) {
                    printf("\n完成接收\n");
                    break;
                }
                int write_length = fwrite(buf, sizeof(char), recv_len, fq);
                if (write_length < recv_len) {
                    printf("文件写入失败\n");
                    break;
                }
                bzero(buf, BUFSIZ);
            }
        }
        else{
            /*3.recv()*/
            recvfrom(sc, buf, BUFSIZ, 0, (struct sockaddr *) &server_addr, &len);
            printf("server:%s\n", buf);
        }
        sleep(1);
    }
    /*close()*/
    close(sc);
    printf("close()\n");
}














