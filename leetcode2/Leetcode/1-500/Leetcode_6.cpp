#include "../leetcode.h"
//283. 移动零
/*
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

示例:
输入: [0,1,0,3,12]
输出: [1,3,12,0,0]

说明:
必须在原数组上操作，不能拷贝额外的数组。
尽量减少操作次数。
 */
void Leetcode::moveZeroes(vector<int>& nums) {
//执行用时 :16 ms, 在所有 cpp 提交中击败了92.98% 的用户
//内存消耗 :9.5 MB, 在所有 cpp 提交中击败了49.31%的用户
    int bb = 0;
    int cc;
    for (int i = 0; i < nums.size(); i++) {
        if(nums[i]==0){
            ++bb;
        } else {
            nums[i - bb] = nums[i];
        }
    }
    for(int j=bb;j>0;j--){
        nums[nums.size()-j]=0;
    }
}
//289. 生命游戏
/*
根据 百度百科 ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。
给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：1 即为活细胞（live），或 0 即为死细胞（dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：
    如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
    如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
    如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
    如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
根据当前状态，写一个函数来计算面板上所有细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。

示例：
输入：
[
  [0,1,0],
  [0,0,1],
  [1,1,1],
  [0,0,0]
]
输出：
[
  [0,0,0],
  [1,0,1],
  [0,1,1],
  [0,1,0]
]
进阶：
    你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
    本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？
 */
/*规则：
 * 1->0 1<2 1>3
 * 1->1 1(2,3)
 * 0->1 1>3
 */
void Leetcode::gameOfLife(vector<vector<int>>& board) {
//    执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户
//    内存消耗：7.1 MB, 在所有 C++ 提交中击败了100.00% 的用户
    vector<vector<int>> answer=board;
    int W=answer[0].size();
    int H=answer.size();
    for (int i = 0; i < H; ++i) {
        for (int j = 0; j < W; ++j) {
            int num1=0;
            for (int k = -1; k < 2; ++k) {
                for (int l = -1; l < 2; ++l) {
                    int hh=i+k;
                    int ww=j+l;
                    if((ww>=0&&ww<W)&&(hh>=0&&hh<H)&&(k!=0||l!=0)&&(answer[hh][ww]==1))
                        num1++;
                }
            }
            if(answer[i][j]==1){
                if(num1<2||num1>3)//如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
                    board[i][j]=0;
            }else{
                if(num1==3)//如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
                    board[i][j]=1;
            }
        }
    }
}